[{"C:\\Users\\Danny\\Documents\\GitHub\\walmart\\src\\App.js":"1","C:\\Users\\Danny\\Documents\\GitHub\\walmart\\src\\index.js":"2","C:\\Users\\Danny\\Documents\\GitHub\\walmart\\src\\pages\\IndividualIssue.js":"3","C:\\Users\\Danny\\Documents\\GitHub\\walmart\\src\\pages\\Home.js":"4","C:\\Users\\Danny\\Documents\\GitHub\\walmart\\src\\components\\Pagination.js":"5","C:\\Users\\Danny\\Documents\\GitHub\\walmart\\src\\components\\Issues.js":"6","C:\\Users\\Danny\\Documents\\GitHub\\walmart\\src\\components\\Navbar.js":"7","C:\\Users\\Danny\\Documents\\GitHub\\walmart\\src\\components\\Issue.js":"8","C:\\Users\\Danny\\Documents\\GitHub\\walmart\\src\\components\\Comment.js":"9"},{"size":683,"mtime":1611728756707,"results":"10","hashOfConfig":"11"},{"size":197,"mtime":1611733738927,"results":"12","hashOfConfig":"11"},{"size":3642,"mtime":1611740553707,"results":"13","hashOfConfig":"11"},{"size":3434,"mtime":1611736626432,"results":"14","hashOfConfig":"11"},{"size":1687,"mtime":1611740279920,"results":"15","hashOfConfig":"11"},{"size":327,"mtime":1611729424891,"results":"16","hashOfConfig":"11"},{"size":275,"mtime":1611729106054,"results":"17","hashOfConfig":"11"},{"size":1604,"mtime":1611740507397,"results":"18","hashOfConfig":"11"},{"size":474,"mtime":1611738310270,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"jpr5o7",{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Danny\\Documents\\GitHub\\walmart\\src\\App.js",[],"C:\\Users\\Danny\\Documents\\GitHub\\walmart\\src\\index.js",[],"C:\\Users\\Danny\\Documents\\GitHub\\walmart\\src\\pages\\IndividualIssue.js",[],"C:\\Users\\Danny\\Documents\\GitHub\\walmart\\src\\pages\\Home.js",["39"],"import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\n\r\n// Components\r\nimport Issues from \"../components/Issues\";\r\nimport Pagination from \"../components/Pagination\";\r\n\r\n// Button from Bootstrap\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nconst org = \"walmartlabs\";\r\nconst repo = \"thorax\";\r\n\r\nconst Home = () => {\r\n  const [issues, setIssues] = useState([]);\r\n  const [nextIssues, setNextIssues] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [issuesPerPage, setIssuesPerPage] = useState(10);\r\n  const [status, setStatus] = useState(\"open\");\r\n  const [pageGroup, setPageGroup] = useState(1);\r\n\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    const fetchIssues = async () => {\r\n      // Get first 100 issues\r\n      const res1 = await axios.get(\r\n        \"https://api.github.com/repos/\" +\r\n          org +\r\n          \"/\" +\r\n          repo +\r\n          \"/issues?per_page=100&state=\" +\r\n          status +\r\n          \"&page=\" +\r\n          String(pageGroup)\r\n      );\r\n      setIssues(res1.data);\r\n\r\n      // Get next 100 issues\r\n      const res2 = await axios.get(\r\n        \"https://api.github.com/repos/\" +\r\n          org +\r\n          \"/\" +\r\n          repo +\r\n          \"/issues?per_page=100&state=\" +\r\n          status +\r\n          \"&page=\" +\r\n          String(pageGroup + 1)\r\n      );\r\n      setNextIssues(res2.data);\r\n\r\n      setLoading(false);\r\n    };\r\n\r\n    fetchIssues();\r\n  }, [status, pageGroup]);\r\n\r\n  // Get current posts\r\n  const indexOfLastIssue = (currentPage - (pageGroup - 1) * 10) * issuesPerPage; //index of last issue = page # * issues per page\r\n  const indexOfFirstIssue = indexOfLastIssue - issuesPerPage; //index of first issue = index of last - issues per page\r\n  const currentIssues = issues.slice(indexOfFirstIssue, indexOfLastIssue); //slice issues from first issue to last issue\r\n\r\n  // Change page\r\n  const paginate = (pageNumber) => {\r\n    setCurrentPage(pageNumber); //set current page\r\n    setPageGroup(Math.ceil(pageNumber / 10)); //page group is ceiling of pagenumber / 10\r\n  };\r\n\r\n  // Loading Page\r\n  if (loading) {\r\n    return <h2>Loading...</h2>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"home\">\r\n      {/* Organization and Repository */}\r\n      <h1>\r\n        {org} / {repo}\r\n      </h1>\r\n\r\n      {/* Open or Closed Issues*/}\r\n      <div className=\"home-status\">\r\n        <h2>{`${status === \"open\" ? \"Open\" : \"Closed\"}`} Issues</h2>\r\n        {/* Buttons to Change Issue Type */}\r\n        <Button\r\n          variant={`${status === \"open\" ? \"secondary\" : \"dark\"}`}\r\n          onClick={() => {\r\n            setStatus(\"open\");\r\n            setCurrentPage(1);\r\n            setPageGroup(1);\r\n          }}\r\n        >\r\n          Open\r\n        </Button>{\" \"}\r\n        <Button\r\n          variant={`${status === \"closed\" ? \"secondary\" : \"dark\"}`}\r\n          onClick={() => {\r\n            setStatus(\"closed\");\r\n            setCurrentPage(1);\r\n            setPageGroup(1);\r\n          }}\r\n        >\r\n          Closed\r\n        </Button>{\" \"}\r\n      </div>\r\n\r\n      <Issues issues={currentIssues} loading={loading} />\r\n      <Pagination\r\n        currentPage={currentPage}\r\n        pageGroup={pageGroup}\r\n        totalIssues={issues.length}\r\n        nextIssues={nextIssues.length}\r\n        issuesPerPage={issuesPerPage}\r\n        paginate={paginate}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","C:\\Users\\Danny\\Documents\\GitHub\\walmart\\src\\components\\Pagination.js",[],"C:\\Users\\Danny\\Documents\\GitHub\\walmart\\src\\components\\Issues.js",[],"C:\\Users\\Danny\\Documents\\GitHub\\walmart\\src\\components\\Navbar.js",[],"C:\\Users\\Danny\\Documents\\GitHub\\walmart\\src\\components\\Issue.js",[],"C:\\Users\\Danny\\Documents\\GitHub\\walmart\\src\\components\\Comment.js",[],{"ruleId":"40","severity":1,"message":"41","line":19,"column":25,"nodeType":"42","messageId":"43","endLine":19,"endColumn":41},"no-unused-vars","'setIssuesPerPage' is assigned a value but never used.","Identifier","unusedVar"]